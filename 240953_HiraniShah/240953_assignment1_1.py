# -*- coding: utf-8 -*-
"""240953_Assignment1.1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/165Oy7iuihS3leR6WbxxyptFBTP5u72YD
"""

import os
import json
import requests
from groq import Groq


GROQ_KEY = os.getenv("GROQ_API_KEY") or "your_groq_api_key_here"
GEMINI_KEY = os.getenv("GEMINI_API_KEY") or "your_gemini_api_key_here"
DEESEEK_KEY = os.getenv("DEESEEK_API_KEY") or "your_deepseek_api_key_here"


groq = Groq(api_key=GROQ_KEY)

results = {}


prompt1 = "What is a REST API?"
for temp in [0.0, 0.7, 1.0]:
    try:
        response = groq.chat.completions.create(
            model="mixtral-8x7b-32768",
            messages=[{"role": "user", "content": prompt1}],
            temperature=temp
        )
        key = f"GROQ | Temp={temp}"
        results[key] = response.choices[0].message.content
        print(f" {key}")
    except Exception as e:
        results[f"GROQ | Temp={temp}"] = f"Error: {e}"


def call_gemini(prompt):
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key={GEMINI_KEY}"
    headers = {"Content-Type": "application/json"}
    body = {
        "contents": [{"parts": [{"text": prompt}]}]
    }
    try:
        res = requests.post(url, headers=headers, json=body)
        res.raise_for_status()
        content = res.json()["candidates"][0]["content"]["parts"][0]["text"]
        return content
    except Exception as e:
        return f"Gemini Error: {e}"

results["Gemini"] = call_gemini("Explain token pricing in LLMs.")


def call_deepseek(prompt):
    url = "https://api.deepseek.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {DEESEEK_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7
    }
    try:
        res = requests.post(url, headers=headers, json=data)
        res.raise_for_status()
        return res.json()["choices"][0]["message"]["content"]
    except Exception as e:
        return f"DeepSeek Error: {e}"

results["DeepSeek"] = call_deepseek("Compare REST and SOAP APIs.")


os.makedirs("outputs", exist_ok=True)
with open("outputs/outputs.json", "w") as f:
    json.dump(results, f, indent=2)

print(" All responses saved to outputs/outputs.json")